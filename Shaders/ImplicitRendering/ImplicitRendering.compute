#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.chichi.render-pipelines.too-young/ShaderLibrary/GlobalShaderVariables.cs.hlsl"
#include "Packages/com.chichi.render-pipelines.too-young/ShaderLibrary/RayTracing/Ray.hlsl"
#include "Packages/com.chichi.render-pipelines.too-young/ShaderLibrary/RayTracing/Intersections.hlsl"
#include "Packages/com.chichi.render-pipelines.too-young/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.chichi.render-pipelines.too-young/ShaderLibrary/RayTracing/RayTracingBxDF.hlsl"

#pragma kernel ImplicitRendering
#pragma kernel Clear

RWTexture2D<float3> _Result;
float4 _ClearColor;
float4x4 _PixelCoordToViewDirWS;
float _ImplicitRenderersCount;

void RayCast(Ray ray, out float3 finalColor)
{
    const int k_MAX_BOUNCE = 16;
    uint bounce = 0;
    bool intersected = false;
    
    float a = 0.5 * (ray.directionWS.y + 1.0);
    finalColor = float3((1.0 - a) * float3(1.0, 1.0, 1.0) + a * float3(0.5, 0.7, 1.0));
    
    do
    {
        for(int i = 0; i < _ImplicitRenderersCount; ++i)
        {
            ImplicitRendererInfo renderInfo = _ImplicitRendererList[i];
            if (renderInfo.primitive == IMPLICITPRIMITIVE_SPHERE)
            {
                HitResult result;
                if(IntersectSphere(ray, _ImplicitSphereList[renderInfo.instanceId], result))
                {
                    ray = SingleScattering(result, finalColor);
                    intersected = true;
                }
            }
        }
    }
    while (intersected && ++bounce < k_MAX_BOUNCE);

    
}


[numthreads(1,1,1)]
void ImplicitRendering (uint3 dispatchThreadId : SV_DispatchThreadID)
{
    uint2 pixelCoord = dispatchThreadId.xy;
    float2 pixelCenterCoord = pixelCoord + float2(0.5, 0.5);
    
    Ray ray = (Ray)0;
    ray.originWS = _CameraWorldPosition.xyz;
    ray.directionWS = SafeNormalize(mul(_PixelCoordToViewDirWS, float4(pixelCenterCoord, 1, 1)).xyz);
    float3 finalColor;
    RayCast(ray, finalColor);
    _Result[pixelCoord] = finalColor;
}

[numthreads(1,1,1)]
void Clear(uint3 dispatchThreadId : SV_DispatchThreadID)
{
    _Result[dispatchThreadId.xy] = _ClearColor;
}

